<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LhsApi</name>
    </assembly>
    <members>
        <member name="T:LhsAPI.Authorization.Jwt.JwtAuthorizationDto">
            <summary>
            JwtAuthorizationDto 是一个 token 信息的传输对象，包含我们创建好的 token 相关信息，用来将 token 信息返回给前台进行使用。
            </summary>
        </member>
        <member name="P:LhsAPI.Authorization.Jwt.JwtAuthorizationDto.Auths">
            <summary>
            授权时间
            </summary>
        </member>
        <member name="P:LhsAPI.Authorization.Jwt.JwtAuthorizationDto.Expires">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:LhsAPI.Authorization.Jwt.JwtAuthorizationDto.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="P:LhsAPI.Authorization.Jwt.JwtAuthorizationDto.UserId">
            <summary>
            用户主键
            </summary>
        </member>
        <member name="P:LhsAPI.Authorization.Jwt.JwtResponseDto.Access">
            <summary>
            访问 Token 值
            </summary>
        </member>
        <member name="P:LhsAPI.Authorization.Jwt.JwtResponseDto.Type">
            <summary>
            授权类型
            </summary>
        </member>
        <member name="P:LhsAPI.Authorization.Jwt.JwtResponseDto.Profile">
            <summary>
            个人信息
            </summary>
        </member>
        <member name="T:LhsAPI.Authorization.Jwt.Profile">
            <summary>
            个人信息
            </summary>
        </member>
        <member name="P:LhsAPI.Authorization.Jwt.Profile.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:LhsAPI.Authorization.Jwt.Profile.Auths">
            <summary>
            授权时间戳
            </summary>
        </member>
        <member name="P:LhsAPI.Authorization.Jwt.Profile.Expires">
            <summary>
            过期时间戳
            </summary>
        </member>
        <member name="M:LhsAPI.Authorization.Jwt.IJwtAppService.Create(System.Int32)">
            <summary>
            新增 Jwt token
            </summary>
            <param name="userId">用户信息数据传输对象</param>
            <returns></returns>
        </member>
        <member name="M:LhsAPI.Authorization.Jwt.IJwtAppService.RefreshAsync(System.String,System.Int32)">
            <summary>
            刷新 Token
            </summary>
            <param name="token">Token</param>
            <param name="dto">用户信息数据传输对象</param>
            <returns></returns>
        </member>
        <member name="M:LhsAPI.Authorization.Jwt.IJwtAppService.IsCurrentActiveTokenAsync">
            <summary>
            判断当前 Token 是否有效
            </summary>
            <returns></returns>
        </member>
        <member name="M:LhsAPI.Authorization.Jwt.IJwtAppService.DeactivateCurrentAsync">
            <summary>
            停用当前 Token
            </summary>
            <returns></returns>
        </member>
        <member name="M:LhsAPI.Authorization.Jwt.IJwtAppService.IsActiveAsync(System.String)">
            <summary>
            判断 Token 是否有效
            </summary>
            <param name="token">Token</param>
            <returns></returns>
        </member>
        <member name="M:LhsAPI.Authorization.Jwt.IJwtAppService.DeactivateAsync(System.String)">
            <summary>
            停用 Token
            </summary>
            <returns></returns>
        </member>
        <member name="T:LhsAPI.Authorization.Jwt.JwtAppService">
            <summary>
            
            </summary>
        </member>
        <member name="F:LhsAPI.Authorization.Jwt.JwtAppService._provider">
            <summary>
            分布式缓存
            </summary>
        </member>
        <member name="F:LhsAPI.Authorization.Jwt.JwtAppService._configuration">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="F:LhsAPI.Authorization.Jwt.JwtAppService._httpContextAccessor">
            <summary>
            获取 HTTP 请求上下文
            </summary>
        </member>
        <member name="M:LhsAPI.Authorization.Jwt.JwtAppService.Create(System.Int32)">
            <summary>
            新增 Token
            https://jasonwatmore.com/post/2019/10/11/aspnet-core-3-jwt-authentication-tutorial-with-example-api
            </summary>
        </member>
        <member name="M:LhsAPI.Authorization.Jwt.JwtAppService.DeactivateAsync(System.String)">
            <summary>
            停用 Token
            </summary>
            <param name="token">Token</param>
            <returns></returns>
        </member>
        <member name="M:LhsAPI.Authorization.Jwt.JwtAppService.DeactivateCurrentAsync">
            <summary>
            停用当前 Token
            </summary>
        </member>
        <member name="M:LhsAPI.Authorization.Jwt.JwtAppService.IsActiveAsync(System.String)">
            <summary>
            判断 Token 是否有效
            </summary>
        </member>
        <member name="M:LhsAPI.Authorization.Jwt.JwtAppService.IsCurrentActiveTokenAsync">
            <summary>
            判断当前 Token 是否有效
            </summary>
            <returns></returns>
        </member>
        <member name="M:LhsAPI.Authorization.Jwt.JwtAppService.RefreshAsync(System.String,System.Int32)">
            <summary>
            刷新 Token
            </summary>
        </member>
        <member name="M:LhsAPI.Authorization.Jwt.JwtAppService.GetCurrentTokenAsync">
            <summary>
            获取 HTTP 请求的 Token 值
            </summary>
        </member>
        <member name="T:LhsAPI.Controllers.HomeController">
            <summary>
            默认controller
            </summary>
        </member>
        <member name="M:LhsAPI.Controllers.HomeController.Index">
            <summary>
            默认地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:LhsAPI.Controllers.IndexController">
            <summary>
            首页
            </summary>
        </member>
        <member name="M:LhsAPI.Controllers.IndexController.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:LhsAPI.Controllers.PlatformControllerBase">
            <summary>
            平台Controller基类
            </summary>
        </member>
        <member name="M:LhsAPI.Controllers.PlatformControllerBase.GetCurrentUserId(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取当前操作者的UserID
            ！！！Controller必须要注入IHttpContextAccessor，参考AuthController
            </summary>
        </member>
        <member name="M:LhsAPI.Controllers.PlatformControllerBase.GetAuthInfo">
            <summary>
            公用方法，生成鉴权信息，用于调用U9
            </summary>
        </member>
        <member name="T:LhsAPI.DataServiceExtension">
            <summary>
            自动批量DI的数据拓展
            </summary>
        </member>
        <member name="M:LhsAPI.DataServiceExtension.RegisterRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            从指定程序集中找出所有的仓储实现，注册到 DI 容器中
            </summary>
            <param name="services"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:LhsAPI.DataServiceExtension.RegisterAppServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly)">
            <summary>
            从指定程序集中找出所有的应用层服务实现，注册到 DI 容器中
            </summary>
            <param name="services"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:LhsAPI.ApiErrorsAttributeFilter">
            <summary>
            Apis异常拦截处理类
            参考：https://www.cnblogs.com/tcjiaan/p/8468901.html
            </summary>
        </member>
        <member name="F:LhsAPI.ApiErrorsAttributeFilter.log">
            <summary>
            log4net
            </summary>
        </member>
        <member name="F:LhsAPI.ApiErrorsAttributeFilter._env">
            <summary>
            环境参数
            </summary>
        </member>
        <member name="M:LhsAPI.ApiErrorsAttributeFilter.#ctor(Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:LhsAPI.ApiErrorsAttributeFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            处理异常
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:LhsAPI.ApiErrorsAttributeFilter.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            异步处理异常
            </summary>
        </member>
        <member name="T:LhsAPI.Middleware.CalculateExecutionTimeMiddlewareExtensions">
            <summary>
            拓展方法 将中间件加入到请求处理通道中
            </summary>
        </member>
        <member name="M:LhsAPI.Middleware.CalculateExecutionTimeMiddlewareExtensions.UseCalculateExecutionTime(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:LhsAPI.Middleware.ResponseTimeMiddleware">
            <summary>
            请求中间件，能够比较准确的计算接口花费的时间
            </summary>
        </member>
        <member name="F:LhsAPI.Middleware.ResponseTimeMiddleware._env">
            <summary>
            环境
            </summary>
        </member>
        <member name="M:LhsAPI.Middleware.ResponseTimeMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Lhs.Interface.IAuditRepository,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            构造函数
            </summary>
            <param name="next"></param>
            <param name="auditRepository"></param>
            <param name="env"></param>
            <param name="accessor"></param>
        </member>
        <member name="M:LhsAPI.Middleware.ResponseTimeMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            记录时间
            </summary>
        </member>
        <member name="M:LhsAPI.Middleware.ResponseTimeMiddleware.SaveSystemMonitorSituationAsync(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Double,System.String,System.String,System.Boolean)">
            <summary>
            异步执行存储监控信息
            </summary>
            <param name="userId"></param>
            <param name="hostName"></param>
            <param name="actionName"></param>
            <param name="controllerName"></param>
            <param name="methodStr"></param>
            <param name="executeTime"></param>
            <param name="requestParam"></param>
            <param name="responseContent"></param>
            <param name="dev"></param>
            <returns>返回任务</returns>
        </member>
        <member name="T:LhsAPI.CustomAuthorizeAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:LhsAPI.CustomAuthorizeAttribute.Roles">
            <summary>
            
            </summary>
        </member>
        <member name="M:LhsAPI.CustomAuthorizeAttribute.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:LhsAPI.Program">
            <summary>
            程序入口
            </summary>
        </member>
        <member name="M:LhsAPI.Program.Main(System.String[])">
            <summary>
            主函数
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:LhsAPI.Program.CreateHostBuilder(System.String[])">
            <summary>
            CreateHostBuilder
            </summary>
            <param name="args">args</param>
            <returns></returns>
        </member>
        <member name="T:LhsAPI.Startup">
            <summary>
            启动设置
            </summary>
        </member>
        <member name="P:LhsAPI.Startup.Configuration">
            <summary>
            配置
            </summary>
        </member>
        <member name="P:LhsAPI.Startup.repository">
            <summary>
            日志仓储
            </summary>
        </member>
        <member name="P:LhsAPI.Startup.HostingEnvironment">
            <summary>
            环境
            </summary>
        </member>
        <member name="M:LhsAPI.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造函数
            </summary>
            <param name="configuration">配置</param>
            <param name="env">环境参数</param>
        </member>
        <member name="M:LhsAPI.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:LhsAPI.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            autoFac使用了UseServiceProviderFactory
            必须写这个方法，不然不走
            在ConfigureServices方法之后调用
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:LhsAPI.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            配置
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
        <member name="T:LhsApi.Dtos.Request.ReqAuth">
            <summary>
            鉴权参数
            </summary>
        </member>
        <member name="P:LhsApi.Dtos.Request.ReqAuth.TimeSign">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="P:LhsApi.Dtos.Request.ReqAuth.Key">
            <summary>
            签名值
            </summary>
        </member>
        <member name="P:LhsApi.Dtos.Request.ReqAuth.OperatorId">
            <summary>
            操作者Id，如果不需要则为0
            </summary>
        </member>
        <member name="T:LhsApi.Dtos.Request.ReqBasePage">
            <summary>
            分页请求的基类
            </summary>
        </member>
        <member name="P:LhsApi.Dtos.Request.ReqBasePage.PageNum">
            <summary>
            页码 
            </summary>
        </member>
        <member name="P:LhsApi.Dtos.Request.ReqBasePage.TimeSign">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="P:LhsApi.Dtos.Request.ReqBasePage.Key">
            <summary>
            签名值
            </summary>
        </member>
        <member name="T:LhsApi.Dtos.Response.RespBasePage">
            <summary>
            分页返回的基类
            </summary>
        </member>
        <member name="P:LhsApi.Dtos.Response.RespBasePage.TotalCount">
            <summary>
            总数据条数 
            </summary>
        </member>
        <member name="P:LhsApi.Dtos.Response.RespBasePage.TotalPage">
            <summary>
            总页数 
            </summary>
        </member>
        <member name="P:LhsApi.Dtos.Response.RespBasePage.DataList">
            <summary>
            列表 
            </summary>
        </member>
    </members>
</doc>
